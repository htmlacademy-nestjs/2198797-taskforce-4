// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  taskId      Int       @id @default(autoincrement()) @map("task_id")
  category    Category  @relation(fields: [categoryId], references: [categoryId])
  categoryId  Int       @map("category_id")
  title       String    @default("")
  description String    @default("")
  price       Float     @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  deadline    DateTime
  picture     String    @default("")
  address     String    @default("")
  tags        String[]
  city        String    @default("")
  status      String    @default("new") 
  creatorId   String    @default("")  @map("creator_id")
  executorId  String?
  comments    Comment[]
  review      Review?

  @@map("tasks")
}

model Category {
  categoryId Int    @id @default(autoincrement()) @map("category_id")
  title      String
  tasks      Task[]


  @@map("categories")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  message   String
  userId    String   @map("user_id")
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId    Int      @map("task_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("comments")
}

model Review {
  reviewId Int    @id @default(autoincrement()) @map("review_id")
  message  String
  grade    Int
  task     Task   @relation(fields: [taskId], references: [taskId])
  taskId   Int    @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}
